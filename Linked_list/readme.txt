### Array vs.Linked List
Array: 通过index访问各个元素 --> O(1)  <br>

数组由于是紧凑连续存储,可以随机访问，通过索引快速找到对应元素，而且相对节约存储空间。但正因为连续存储，内存空间必须一次性分配够，所以说数组如果要扩容，需要重新分配一块更大的空间，再把数据全部复制过去，时间复杂度 O(N)；而且你如果想在数组中间进行插入和删除，每次必须搬移后面的所有数据以保持连续，时间复杂度 O(N)。<br>

Linked List: 指针之间有指针链接，访问需要挨个元素-->O(n) <br>
            
因为元素不连续，而是靠指针指向下一个元素的位置，所以不存在数组的扩容问题；如果知道某一元素的前驱和后驱，操作指针即可删除该元素或者插入新元素，时间复杂度 O(1)。但是正因为存储空间不连续，你无法根据一个索引算出对应元素的地址，所以不能随机访问；而且由于每个元素必须存储指向前后元素位置的指针，会消耗相对更多的储存空间。<br>


### 迭代(iteration) vs. 递归(recursion)

递归和迭代都是循环中的一种。

简单地说，递归是重复调用函数自身实现循环。迭代是函数内某段代码实现循环，而迭代与普通循环的区别是：循环代码中参与运算的变量同时是保存结果的变量，当前保存的结果作为下一次循环计算的初始值。

递归循环中，遇到满足终止条件的情况时逐层返回来结束。迭代则使用计数器结束循环。当然很多情况都是多种循环混合采用，这要根据具体需求。

使用递归要注意的有两点:

1)递归就是在过程或函数里面调用自身;
2)在使用递归时,必须有一个明确的递归结束条件,称为递归出口.

递归分为两个阶段:

1)递推:把复杂的问题的求解推到比原问题简单一些的问题的求解;
2)回归:当获得最简单的情况后,逐步返回,依次得到复杂的解.

递归和迭代的空间利用率

迭代是逐渐逼近，用新值覆盖旧值，直到满足条件后结束，不保存中间值，空间利用率高。
递归是将一个问题分解为若干相对小一点的问题，遇到递归出口再原路返回，因此必须保存相关的中间值，这些中间值压入栈保存，问题规模较大时会占用大量内存。


利用递归可以解决很多问题:如背包问题，汉诺塔问题，斐波那契数列等
迭代经典例子就是实数的累加，比如计算1-100所有实数的和。

两者之间的关系：

1） 递归中一定有迭代,但是迭代中不一定有递归,大部分可以相互转换。
2） 能用迭代的不用递归,递归调用函数,计算有重复,浪费空间,并且递归太深容易造成堆栈的溢出.


Note:
1. while p and p.next:	
	condition
2.  

Reference:
——— 双指针技巧秒杀七道链表题目 https://labuladong.github.io/algo/2/17/16/

——— 图灵星球 
——— 古城算法基础数据结构 (五) -- 链表(上) 反转 + 合并 + 找环 https://www.youtube.com/watch?v=gDxv49BGz0w
